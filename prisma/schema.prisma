// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@unique([providerAccountId])
}

model FacebookAccount {
    id               Int             @id @default(autoincrement())
    instagramId      String
    createdAt        DateTime        @default(now())
    long_lived_token String?         @db.Text()
    instagramPages   InstagramPage[]

    @@unique([instagramId])
}

enum InstagramPageType {
    CREATOR
    BUSINESS
}

model InstagramPage {
    id                Int               @id @default(autoincrement())
    instagramId       String            @default("")
    profilePictureUrl String            @db.Text()
    followers         Int
    biography         String            @db.Text()
    userDescription   String?           @db.Text()
    vibe              String?
    goal              String?
    paused            Boolean           @default(false)
    hasDemoed         Boolean?
    type              InstagramPageType @default(BUSINESS)
    subType           String?
    username          String
    createdAt         DateTime          @default(now())
    userId            String            @default("")
    user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    facebookAccount   FacebookAccount   @relation(fields: [facebookAccountId], references: [id], onDelete: Cascade)
    facebookAccountId Int
    demoReplies       DemoReply[]
}

model Subscription {
    id             String   @id @default(cuid())
    userId         String
    subscriptionId String?  @unique
    status         String
    expires        DateTime
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId      String?
    customerId     String?  @unique
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?         @db.VarChar(1000)
    accounts      Account[]
    sessions      Session[]
    subscription  Subscription[]
    InstagramPage InstagramPage[]
    CommentReply  CommentReply[]
    createdAt     DateTime        @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CommentReply {
    id          String   @id @default(cuid())
    instagramId String
    text        String
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
}

model DemoReply {
    id              String        @id @default(cuid())
    instagramPage   InstagramPage @relation(fields: [instagramPageId], references: [id], onDelete: Cascade)
    instagramPageId Int
    handle          String        @default("")
    commentText     String        @db.VarChar(2200)
    replyText       String        @db.VarChar(2200)
    mediaId         String
    mediaText       String
    mediaUrl        String        @db.VarChar(2200)
    createdAt       DateTime      @default(now())
}
